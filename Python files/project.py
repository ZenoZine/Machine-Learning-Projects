# -*- coding: utf-8 -*-
"""Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O0ML43gTZV6qTbe1I7WrRrzaC7fLdxSE
"""

import csv
import pandas as pd
import numpy as np
import statistics
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('ASC(1).csv')

data.head(10)

plt.scatter(data.index, data['Your_Column_Name'])  # Using df.index as x-axis values, adjust as needed
plt.title('Scatter Plot of Your_Column_Name')
plt.xlabel('Index (or any other appropriate label)')
plt.ylabel('Your_Column_Name')
plt.show()

# Update the blank spaces with "-"

input_file_path = 'Air_Traffic_Cargo_Statistics.csv'
output_file_path = 'Book2.csv'

with open(input_file_path, 'r', newline='') as infile, open(output_file_path, 'w', newline='') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)

    for row in reader:
        # Replace blanks with "-"
        modified_row = [cell if cell.strip() != '' else '-' for cell in row]
        writer.writerow(modified_row)

input_file_path = 'Air_Traffic_Cargo_Statistics.csv'
output_file_path = 'output.csv'

# Read the content of the file
with open(input_file_path, 'r', newline='') as infile:
    reader = csv.reader(infile)
    rows = list(reader)  # Convert the reader to a list of rows

# Modify the rows
modified_rows = []
for row in rows:
    modified_row = [cell if cell.strip() != '' else '-' for cell in row]
    modified_rows.append(modified_row)

# Write the modified content to the output file
with open(output_file_path, 'w', newline='') as outfile:
    writer = csv.writer(outfile)
    writer.writerows(modified_rows)

# Do NOT run this cell please

with open(input_file_path, 'r', newline='') as infile, open(output_file_path, 'w', newline='') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)

    for row in reader:
        # Replace blanks with "-"
        modified_row = [cell if cell.strip() != '' else '-' for cell in row]
        print(f"Original Row: {row}")
        print(f"Modified Row: {modified_row}")
        writer.writerow(modified_row)

train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

train_data.to_csv('train_data.csv', index=False)
test_data.to_csv('test_data.csv', index=False)

"""Cargo - 1
Mail - 2
Express - 3
"""

column_to_check = 'Operating Airline IATA Code'
for index, value in data[column_to_check].items():
    if isinstance(value, str) and not value.isalnum():
        print(f"Non-alphanumeric value found in column '{column_to_check}', Index: {index}, Value: {value}")

print(data.head())

"""IATA airline codes: https://en.wikipedia.org/wiki/List_of_airline_codes_(O)"""

# Initially, the table displayed "NaN" in the "Operating Airline IATA Code"

# Dataframe used for reading CSV files; very cool
df = pd.DataFrame(data)

# Specific indices in the rows to update in the file
rows_to_update = [4,5]

# Update values
new_values = ['SU','SU']

#
column_name = ['Operating Airline IATA Code', 'Published Airline IATA Code']
df.loc[rows_to_update, column_name] = new_values

data.head(1001)

# Changed the values in one column to be 1, 2, or 3 for the type of cargo

"""Cargo Type Code
Cargo Metric TONS
"""

X = data['Cargo Metric TONS'].values.reshape(-1, 1)

Y = data['Cargo Type Code'].values

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

model = LinearRegression()

model.fit(X_train, Y_train)

Y_pred = model.predict(X_test)

plt.scatter(X_test, Y_test, color='black', label='Actual data')
plt.plot(X_test, Y_pred, color='blue', linewidth=2, label='Regression line')
plt.xlabel('Cargo Weight')
plt.ylabel('Cargo Type')
plt.legend()
plt.show()

x_values = np.array(df['1 Type Code'])

y_values = np.array(df['1 Weight LBS'])

statistics.covariance(x_values, y_values)

# I'm trying to clean the data but I also replace
# possible NaN values in the IATA code column

data.fillna(0, inplace = True)

data.head(1001)

column_name = ['Operating Airline IATA Code']

nan_values = data[column_name].isna()

nan_count = nan_values.sum()

print("Number of NaN values in", column_name, ":", nan_count)
print("Indices of NaN values:", df[column_name][nan_values].index)

nan_indices = df[column_name][nan_values].index.tolist()
print("Indices of NaN values:", nan_indices)

blank_values = df[column_name].apply(lambda x: x.strip() if isinstance(x, str) else x).eq('')

# Count the number of blank values
blank_count = blank_values.sum()

# Print the count and indices of blank values
print("Number of blank values in", column_name, ":", blank_count)
print("Indices of blank values:", df[column_name][blank_values].index)
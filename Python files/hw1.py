# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ByQWCb3oNcUk6h2tLps0enBAU_pxNXVR
"""

import numpy as np
import matplotlib.pyplot as plt

x_values = np.array([-0.5, -0.2, 0.5, 0.75, 1])
y_values = np.array([7.625, 9.3632, 9.625, 8.7578, 8])


def quadratic_function (x_values, y_values):
  # Attempting to solve the quadratic equation

  # return y_values[0] + x_values*y_values[1] + x_values**2*y_values[2]

  sum = 0.0
  for x in range(len(y_values)):
    sum = sum + y_values[x] * (x_values ** x)

  return sum

print(quadratic_function(x_values, y_values))

def OLS_matrix(x_values, y_values):
  lx = len(x_values)
  ly = len(y_values)

  matrix = np.zeros((lx, ly))

  for x_index in range(lx):
    for y_index in range(ly):
      matrix[x_index, y_index] = x_values[x_index] ** y_index

  return matrix

  # y = x_values * y_values + 0

def beta_hat(matrix):
  # Copied from Dr. Mihail's code

  beta = np.linalg.inv(np.transpose(matrix).dot(matrix)).dot(np.transpose(matrix)).dot(np.reshape(y_values, (-1, 1)))

  return beta

x = np.linspace(-2, 2, 50)

y = quadratic_function(x, beta_hat(OLS_matrix(x_values, y_values)))

plt.plot(x, y, '-')
plt.plot(x_values, y_values, lw = 0, marker = 'o', fillstyle = 'none')

plt.xlabel('X')
plt.ylabel('f(x)')

plt.legend(['4th-degree Polynomial', 'Given Data Points'], loc = 'lower right')

# this defines the family of cubics
f = lambda w, x: w[0] + w[1]*x + w[2]*(x**2) + w[3]*(x**3)

# sample 20 equally spaced values between -2 and 2
dom = np.linspace(-2, 2, 20)

# generate noisy data points, as values of a particular cubic + noise
sample_w = [-4, 2, -0.5, -1]

val = f(sample_w, dom) + np.random.randn(20)/2

# generate ground truth samples for visualization only
val_truth = f(sample_w, dom)

# Matrix Creation
mat = np.array([dom ** 0, dom, dom ** 2, dom ** 3]).T

# Dependents
dep = np.expand_dims(val, axis = 0).T

# Linear Algebra
lstsq = np.linalg.lstsq(mat, dep, rcond = None)[0]

# plot
fig, ax = plt.subplots(1, 1)
ax.plot(dom, f(lstsq, dom), '-r')
ax.plot(dom, val, 'bx')
ax.plot(dom, val_truth, '-g')
ax.legend(('Added Model','Noisy samples', 'Ground truth'))
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('Noisy samples and ground truth function')